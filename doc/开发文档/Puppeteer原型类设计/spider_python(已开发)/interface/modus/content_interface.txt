class ContentInterface {
    // 获取全局网页的outerHTML 代码，并等待（在网页没加载完成前）
	// 获取全局网页的outerHTML 字符串
	// 获取全局的网页的所有a标签的href，并返回一个数组 ，并根据参数指定是否要补全URL路径
	// 获取全局的网页的所有img标签的src，并返回一个数组  ，并根据参数指定是否要补全URL路径
	// 获取全局的网页的所有css标签的资源路径，并返回一个数组  ，并根据参数指定是否要补全URL路径
	// 获取全局的网页的所有js标签的资源路径，并返回一个数组  ，并根据参数指定是否要补全URL路径
	// 获取全局的所有元素querySelectorAll，并返回一个数组
	// 根据一个选择器，判断元素是否存在
	// 根据一个选择器，判断是否是一个图片元素
	// 根据一个选择器，判断是否是一个A元素
	// 根据一个选择器，判断是否是一个JS元素
	// 根据一个选择器，判断是否是一个CSS元素
	// 根据一个选择器，获取一个元素，
	// 根据一个选择器，获取一个元素（querySelector）并等待（如果没有找到，则定时回调等待多少秒，默认50秒）
	// 根据一个选择器，获取一组元素（querySelectorAll）并等待（如果没有找到，则定时回调等待多少秒，默认50秒）
	// 根据一个选择器，获取text内容（单个querySelector）
	// 根据一个选择器，获取text内容（多个querySelectorAll），所获取内容返回为数组
	// 根据一个选择器，获取HTML内容
	// 根据一个选择器，获取text内容并等待（如果没有找到，则定时回调等待多少秒，默认50秒）
	// 根据一个选择器，获取HTML内容并等待（如果没有找到，则定时回调等待多少秒，默认50秒）
	// 根据一个TAG标签，获取一组元素，
	// 根据一个xpath，获取一个元素，
	// 根据一个选择器，获取该元素的
	// 根据一个选择器，获取指写的兄弟元素的之前的第n个的TEXT，默认N为0，如果没有找到返回‘’
	// 根据一个选择器，获取指写的兄弟元素的之后的第n个的TEXT，默认N为0，如果没有找到返回‘’
	// 根据一个选择器，获取指定的data属性（单个querySelector）
	// 根据一个选择器，获取指定的data属性（多个querySelectorAll），所获取内容返回为数组
	// 根据一个选择器，统计有多少个
	// 根据一个选择器，指定指index默认0，获取该选择器的text
	// 根据一个选择器，指定指index默认0，获取该选择器的html
	// 根据一个选择器，指定指index默认0，获取该选择器指定的data
	// 根据一个选择器，指定指index默认0，获取该选择器指定的value
	// 根据一个选择器，替换基class
	// 根据一个选择器，添加其class
	// 根据一个选择器，删除其class
	// 根据一个选择器，设置其style
	// 根据一个TEXT，根据TEXT来判读并获取一个元素
	// 获取浏览器的，LOG打印值
	// 根据一个选择器，回调等待直到出现该元素
	// 根据一个选择器，获取高
	// 根据一个选择器，获取宽
	// 根据一个选择器，获取高
	// 获取HTML中出现的IP（正则匹配），获取一个数组
	// 获取HTML中出现的IP（正则匹配），获取一个最后一个值
	// 从HTML全属OUTHTML中搜索某个内容，如果搜索到，返回值
    }
module.exports = {
    ContentInterface,
}

补全上面的接口，并将函数功能以/*注释*/的形式放到函数体内
